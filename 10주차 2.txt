=========================================================
STL.cpp: 2024-05-09 목요일 오후 1:48:29
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 9일 목요일		(10주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// 6월 6일 목요일 - 강의하겠습니다.
//-------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(std::iterator_traits<반복자>::iterator_category).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	String s{ "1357924680" };

	// s의 반복자가 - random_access_iterator_tag
	f(s.begin());

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-09 목요일 오후 1:51:00
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 9일 목요일		(10주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// 6월 6일 목요일 - 강의하겠습니다.
//-------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(std::iterator_traits<반복자>::iterator_category).name() << '\n';
	// C++16
	std::cout << typeid(반복자::iterator_cencpt).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	String s{ "1357924680" };

	// s의 반복자가 - random_access_iterator_tag
	f(s.begin());

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-09 목요일 오후 2:53:52
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 9일 목요일		(10주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// 6월 6일 목요일 - 강의하겠습니다.
//-------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

// [실습] 연산자 오버로딩
//-------------
int main(void)
//-------------
{
	String s{ "1357924580" };

	// 다음 문장이 문제없이 실행될 수 있도록 필요한 모든 코딩을 하라.
	std::sort(s.begin(), s.end());

	std::cout << s << '\n';		// 0123456789가 출력되어야 한다.

	save("STL.cpp");
}