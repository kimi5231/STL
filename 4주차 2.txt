//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 26일 화요일		(4주 1)
// 
// free-store - RAII
// 
// C++언어에서 사용하지 않도록 권고
// - char*		-->	string
// - T[N]		-->	array<T, N>
// - T*(raw *)	-->	unique_ptr, shared_ptr(스마트 포인터)
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	int* p;

	p = new int[100];
	
	save("STL.cpp");

	delete[]p;
	// 1. momory leak
	// 2. dangling pointer
	// 3. 제어경로가 복잡해 질 경우 문제 발생

	// -> RAII
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:37:27
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// Dog를 free store에 만들어 본다.

	std::unique_ptr<Dog> p{ new Dog };

	new Dog;
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:37:45
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

//-------------
int main(void)
//-------------
{
	// Dog를 free store에 만들어 본다.

	std::unique_ptr<Dog> p{ new Dog };

	new Dog;
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:38:33
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// Dog를 free store에 만들어 본다.

	std::unique_ptr<Dog> p{ new Dog };

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:43:38
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// Dog를 10객체를 free store에 만들어 본다.

	std::unique_ptr<Dog[]> p{new Dog[10]};

	save("STL.cpp");
	std::cout << "메인이 끝" << '\n';		// 이 문장 출력 후 p가 가리키는 객체 소멸
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:46:29
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// 이 main()은 문제가 없지만 불편하다. -> new와 짝이 맞는 delete가 없는데?

	std::unique_ptr<Dog[]> p{new Dog[10]};

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:48:52
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// 이 main()은 문제가 없지만 불편하다. -> new와 짝이 맞는 delete가 없는데?

	std::unique_ptr<Dog> p = std::make_unique<Dog>();

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:49:28
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// 이 main()은 문제가 없지만 불편하다. -> new와 짝이 맞는 delete가 없는데?
	// 편의함수 make_unique를 사용한다.

	std::unique_ptr<Dog> p = std::make_unique<Dog>();

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 1:50:11
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// unique_ptr 사용 - 자원을 독점 소유(ownership)
//-------------------------------------------------------------------
#include <iostream>
#include <memory>
#include "save.h"

class Dog
{
public:
	Dog() { std::cout << "생성" << '\n'; }
	~Dog() { std::cout << "소멸" << '\n'; }
};

class 스마트포인터 {
private:
	Dog* p;
public:
	스마트포인터(Dog* p) : p(p) {}
	~스마트포인터() { delete p; }
};

void f()
{
	std::cout << "f 시작" << '\n';
	스마트포인터 p(new Dog);
	throw 1234;
	std::cout << "f 끝" << '\n';
}

//-------------
int main(void)
//-------------
{
	// 이 main()은 문제가 없지만 불편하다. -> new와 짝이 맞는 delete가 없는데?
	// 편의함수 make_unique를 사용한다.

	std::unique_ptr<Dog[]> p = std::make_unique<Dog[]>(10);

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:04:10
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:06:19
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt" };

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:07:14
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt" };

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:07:44
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:09:14
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	char c;
	while (in.read(&c, sizeof(char)))
		std::cout << (c = toupper(c));

	std::ofstream out{ "STL대문자.txt", std::ios::binary };
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:11:02
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:11:23
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt"};

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:11:53
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:20:12
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	char c;
	while (in.read(&c, sizeof(char)))
		out << (c = toupper(c));

	std::transform(std::istream_iterator<char>{in}, { },
		std::ostreambuf_iterator<char>{std::cout}, [] (char c) {
			return toupper(c);
		});
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:20:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };
	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	std::transform(std::istream_iterator<char>{in}, { },
		std::ostreambuf_iterator<char>{std::cout}, [] (char c) {
			return toupper(c);
		});
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:21:21
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"

// [문제] "STL.cpp"를 읽어 모든 소문자를 대문자로 변환하여
// "STL대문자.txt"에 저장하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in { "STL.cpp", std::ios::binary };

	if (not in)
		return 1234567890;

	std::ofstream out{ "STL대문자.txt", std::ios::binary};

	std::transform(std::istreambuf_iterator<char>{in}, { },
		std::ostreambuf_iterator<char>{std::cout}, [] (char c) {
			return toupper(c);
		});
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:26:01
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"

//-------------
int main(void)
//-------------
{
	
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:41:01
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <cstdlib>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 2:55:48
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <cstdlib>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 정렬한다 - qsort는 C함수이지만 generic 함수이다.
	// qsort( 어디를, 몇개야, 한개의 크기는, 너 만의 정렬방법을 알려줘 );

	int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)a - *(int*)b;
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 3:00:31
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <cstdlib>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 정렬한다 - qsort는 C함수이지만 generic 함수이다.
	// qsort( 어디를, 몇개야, 한개의 크기는, 너 만의 정렬방법을 알려줘 );

	int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 3:01:01
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 정렬한다 - qsort는 C함수이지만 generic 함수이다.
	// qsort( 어디를, 몇개야, 한개의 크기는, 너 만의 정렬방법을 알려줘 );

	int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 3:02:44
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 정렬한다 - qsort는 C함수이지만 generic 함수이다.
	// qsort( 어디를, 몇개야, 한개의 크기는, 너 만의 정렬방법을 알려줘 );

	//int 정렬방법(const void*, const void*);
	qsort(a.data(), a.size(), sizeof(int), [](const void* a, const void* b) {
		return *(int*)a - *(int*)b;
		});

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 3:08:02
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 28일 목요일		(4주 2)
// 
// callable type -> 정렬 예제에서 시작
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 qsort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

int 정렬방법(const void*, const void*);

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// 여기서 qsort로 정렬한다 - qsort는 C함수이지만 generic 함수이다.
	// qsort( 어디를, 몇개야, 한개의 크기는, 너 만의 정렬방법을 알려줘 );

	std::cout << typeid(정렬방법).name() << '\n';

	qsort(a.data(), a.size(), sizeof(int), 정렬방법);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp:, 2024-03-28 목요일 오후 3:09:49
=========================================================
