=========================================================
STL.cpp:, 2024-04-02 화요일 오후 1:37:34
=========================================================
//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

int 정렬방법(const void*, const void*);

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 오름차순으로 정렬하라.

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 1:54:00
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

int 정렬방법(const void*, const void*);

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 오름차순으로 정렬하라. (Defalt 오름차순)
	std::sort(a.begin(), a.end()); 

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

int 정렬방법(const void* a, const void* b)
{
	return *(int*)b - *(int*)a;
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 1:56:25
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

bool 정렬방법(int, int);

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	std::sort(a.begin(), a.end(), 정렬방법); 

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

bool 정렬방법(int a, int b)
{
	return a > b;		// descending order
}

=========================================================
STL.cpp:, 2024-04-02 화요일 오후 2:01:34
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	std::sort(a.begin(), a.end(), [](int a, int b) {
		return a > b;			// 람다 사용, 가독성이 좋아짐.
		});

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:07:09
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

class Dog
{
public:
	bool operator()(int a, int b) {
		return a > b;
	}
};

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	Dog dog;
	std::sort(a.begin(), a.end(), dog);

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:08:03
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

class Dog
{
public:
	bool operator()(int a, int b) {
		return a > b;
	}
};

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	std::sort(a.begin(), a.end(), Dog{});

	for (int num : a)
		std::print("{:8}", num);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:15:52
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

class Dog
{
private:
	int cnt{};
public:
	bool operator()(int a, int b) {
		++cnt;
		return a > b;
	}
	void showResult() const {
		std::cout << cnt << "번 비교함수 호출됨" << '\n';
	}
};

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	Dog dog;
	std::sort(a.begin(), a.end(), dog);

	for (int num : a)
		std::print("{:8}", num);

	dog.showResult();

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:16:43
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 100> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

class Dog
{
private:
	int cnt{};
public:
	bool operator()(int a, int b) {
		++cnt;
		return a > b;
	}
	void showResult() const {
		std::cout << cnt << "번 비교함수 호출됨" << '\n';
	}
};

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	Dog dog;
	std::sort(a.begin(), a.end(), dog);

	for (int num : a)
		std::print("{:8}", num);

	dog.showResult();

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:19:26
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 확보하라.
// int 100개의 값을 [1, 10000] 랜덤값으로 설정하라.
// int값 100개를 C의 std::sort를 사용하여 오름차순으로 정렬하라.
// 정렬결과를 한 줄에 10개씩 화면에 출력하라.

std::array<int, 1000> a;
std::uniform_int_distribution uid{1, 10000};
std::default_random_engine dre;

class Dog
{
private:
	int cnt{};
public:
	bool operator()(int a, int b) {
		++cnt;
		std::cout << cnt << "번 비교함수 호출됨" << '\n';
		return a > b;
	}
	void showResult() const {
		std::cout << cnt << "번 비교함수 호출됨" << '\n';
	}
};

//-------------
int main(void)
//-------------
{
	for (int& num : a)
		num = uid(dre);

	// std::sort를 사용하여 a를 내림차순으로 정렬하라.
	Dog dog;
	std::sort(a.begin(), a.end(), dog);

	for (int num : a)
		std::print("{:8}", num);

	dog.showResult();

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:28:41
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	[]() {
		std::cout << "안녕? 난 람다라고 해! 잘 부탁해" << '\n';
		};

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:30:38
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	[](int a ,int b) {
		std::cout << "안녕? 난 람다라고 해! 잘 부탁해 - " << a+b << '\n';
		}(3, 4);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:33:06
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	auto 람다 = []() {
		std::cout << "람다입니다" << '\n';
		};

	std::cout << "람다의 정체 - " << typeid(람다).name() << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:38:24
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	auto 람다1 = []() {
		std::cout << "람다입니다" << '\n';
		};
	
	auto 람다2 = []() {
		std::cout << "람다입니다" << '\n';
		};

	std::cout << typeid(람다1).name() << '\n';
	std::cout << typeid(람다2).name() << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:41:54
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

auto 람다2 = []() {
	std::cout << "람다입니다" << '\n';
	};

//-------------
int main(void)
//-------------
{
	auto 람다1 = []() {
		std::cout << "람다입니다" << '\n';
		};

	std::cout << typeid(람다1).name() << '\n';
	std::cout << typeid(람다2).name() << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:50:53
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

void jump()
{
	std::cout << "점프" << '\n';
}

void slide()
{
	std::cout << "슬라이드" << '\n';
}

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	void (*f)() = jump;

	while (true) {
		// s를 누르면 기능을 토글
		std::cout << "키를 누르면 기능을 수행 - ";
		char c;
		std::cin >> c;

		if ('a' == c) {
			f();
		}
		if ('s' == c) {
			if (f == jump)
				f = slide;
			else
				f = jump;
		}
	}

	
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:53:42
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

void f(int(*x)(int, int))
{
	std::cout << x(3, 5) << '\n';
}

int x(int a, int b)
{
	return a * b;
}

//-------------
int main(void)
//-------------
{
	f([](int a, int b)->int { return 333; });

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:53:53
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

void f(int(*x)(int, int))
{
	std::cout << x(3, 5) << '\n';
}

int x(int a, int b)
{
	return a * b;
}

//-------------
int main(void)
//-------------
{
	f(x);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:58:25
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
// 
// --> 모든 호출가능타입을 대표하는 클래스 -> function
//-------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"

void f(std::function<int(int, int)> x)
{
	std::cout << x(3, 5) << '\n';
}

int x(int a, int b)
{
	return a * b;
}

//-------------
int main(void)
//-------------
{
	f([](int a, int b)->int { return 333; });

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 2:58:56
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
// 
// callable type -> 정렬 예제에서 시작
// 
// 많은 데이터를 정렬할 때 - 정렬기준을 어떻게 sort 함수에 전달하지?
// 1. 함수 포인터
// 2. 람다
// 3. 함수 객체( function object ) - ()연산자를 오버로딩한 한 클래스 객체
//    상태를 가질 수 있다.
// 
// --> 모든 호출가능타입을 대표하는 클래스 -> function
//-------------------------------------------------------------------
#include <iostream>
#include <functional>
#include "save.h"

void f(std::function<int(int, int)> x)
{
	std::cout << x(3, 5) << '\n';
}

int x(int a, int b)
{
	return a * b;
}

//-------------
int main(void)
//-------------
{
	f([](int a, int b)->int { return 333; });
	f(x);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-04-02 화요일 오후 3:10:44
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		4월 2일 화요일		(5주 1)
// 
// 4월 25일 (8주 1일) - 중간시험
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

class String
{
private:
	size_t len{};
	std::unique_ptr<char[]> p{};
public:
	String(const char* str) : len(strlen(str)) {
		p = std::make_unique<char[]>(len);
		memcpy(p.get(), str, len);
	}
	friend std::ostream& operator<<(std::ostream& os, const String& s) {
		for (size_t i = 0; i < s.len; i++)
			os << s.p.get()[i];
		return os;
	}
};

//-------------
int main(void)
//-------------
{
	String s{ "STL 공부를 위한 클래스" };

	std::cout << s << '\n';

	save("STL.cpp");
}