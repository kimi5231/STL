=========================================================
STL.cpp: 2024-05-02 목요일 오후 1:35:33
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// list - 컨테이너는 자기가 잘 할 수 있는 동작을 멤버함수로 제공한다.
// 동일한 알고리즘 함수와 멤버함수가 있다면 멤버함수를 사용한다.
// 
// 예) remove는 전역알고리즘함수 / list의 멤버함수
// 멤버함수를 사용한다.
//-------------------------------------------------------------------
#include <iostream>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 1:49:18
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// forward_list - 아무리 잘  코딩해도 이것보다 잘 할 수는 없다.
// 
// It is intended that forward_list have zero space or time overhead
// relative to a hand - written C - style singly linked list.
// Features that would conflict with that goal have been omitted.
//-------------------------------------------------------------------
#include <iostream>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:04:22
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// span - contiguous memory를 가진 컨테이너를 대표하는 클래스
//-------------------------------------------------------------------
#include <iostream>
#include <span>
#include <algorithm>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	int a[10]{1, 3, 5, 7, 9, 2, 4, 6, 8, 10};

	std::sort(a, a + 10);

	for (int num : a)
		std::cout << num << ' ';
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:07:04
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// span - contiguous memory를 가진 컨테이너를 대표하는 클래스
//-------------------------------------------------------------------
#include <iostream>
#include <span>
#include <algorithm>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	int a[10]{1, 3, 5, 7, 9, 2, 4, 6, 8, 10};

	std::span<int> s{ a };

	std::sort(s.begin(), s.end());

	for (int num : a)
		std::cout << num << ' ';
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:09:57
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// span - contiguous memory를 가진 컨테이너를 대표하는 클래스
//-------------------------------------------------------------------
#include <iostream>
#include <span>
#include <algorithm>
#include <vector>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	std::vector<int> a{1, 3, 5, 7, 9, 2, 4, 6, 8, 10};

	std::span<int> s{ a };

	std::sort(s.begin(), s.end());

	for (auto i = s.begin(); i < s.end(); ++i)
		std::cout << *i << ' ';
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:29:52
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 출력반복자의 동작을 알아본다. 
	std::ostream_iterator<char> p{std::cout};
	std::cout << "출력스트림 반복자의 크기 - " << sizeof(p) << '\n';
	std::cout << "반복자의 타입 - " << typeid(p).name() << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:32:24
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 출력반복자의 동작을 알아본다. 
	std::ostream_iterator<char> p{std::cout};

	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:34:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 출력반복자의 동작을 알아본다. 
	std::ostream_iterator<char> p{std::cout};

	(p.operator*()).operator=('A');
	p.operator++();
	*p = 'B';
	++p;
	*p = 'C';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:37:09
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 출력반복자의 동작을 알아본다. 
	std::ostream_iterator<char> p{std::cout};

	p = 'A';
	p = 'B';
	p = 'C';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:46:41
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 목요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(iter).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	// 반복자는 6가지 종류(category)로 구분된다.
	// 함수 f는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// f를 코딩하라.

	std::vector<int> v;
	std::ostream_iterator<char> p{std::cout};

	f(v.begin());
	f(p);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:48:57
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 화요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(iter).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	// 반복자는 6가지 종류(category)로 구분된다.
	// 함수 f는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// f를 코딩하라.

	std::vector<String> v;
	std::ostream_iterator<char> p{std::cout};

	f(v.begin());
	f(p);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:53:51
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 화요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(반복자::iterator_category).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	// 반복자는 6가지 종류(category)로 구분된다.
	// 함수 f는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// f를 코딩하라.

	std::vector<String> v;
	std::ostream_iterator<char> p{std::cout};

	f(v.begin());
	f(p);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-02 목요일 오후 2:59:36
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 2일 화요일		(9주 2)
// 
// Iterator - 반복자는 포인터를 일반화 한 것이다.
// 
// Iterators are a generalization of pointers
// that allow a C++ program to work with different data structures
// in a uniform manner.
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <list>
#include<forward_list>
#include <deque>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <typename 반복자>
void f(반복자 iter)
{
	std::cout << typeid(반복자::iterator_category).name() << '\n';
}

//-------------
int main(void)
//-------------
{
	// 반복자는 6가지 종류(category)로 구분된다.
	// 함수 f는 반복자를 인자로 받아 어떤 종류인지 출력한다.
	// f를 코딩하라.

	f(std::istream_iterator<char>{std::cin});
	f(std::ostream_iterator<char>{ std::cout });
	f(std::forward_list<int>{}.begin());
	f(std::list<int>{}.cbegin());
	f(std::deque<int>{}.rbegin());
	f(std::vector<int>{}.begin());

	save("STL.cpp");
}