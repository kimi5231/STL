

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << "\n";
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	out << "\n" << "\n";
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << "\n";
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	out << "\n" << "\n";
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << "\n";
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	out << "\n" << "\n";
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}
=========================================================
저장한 시간: 
=========================================================



//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로부터 흐른 tick
	std::cout << now << '\n';
	// 시간형식으로 변환
	// 현지 시간으로 변환
	// 한국형식으로 출력한다. 

	out << '\n';
	out << "=========================================================" << '\n';
	out << "저장한 시간: " << '\n';
	out << "=========================================================" << '\n';
	out << '\n';

	out << "\n\n";
	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}
=========================================================
저장한 시간:  2024-03-07 목요일 오후 1:46:54
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto It = localtime(&utc);	//c 함수

	// 한국형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	
	// 시간을 기록한다.
	out << '\n';
	out << "=========================================================" << '\n';
	out << "저장한 시간: " << std::put_time(It, " %x %A %X") << '\n';
	out << "=========================================================" << '\n';
	out << '\n';

	out.imbue(old); // 이용하고 돌려줘야함.

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}
=========================================================
저장한 시간:  2024-03-07 목요일 오후 1:50:10
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 5일 화요일		(1주 1)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view);

int main(void)
{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

void save(std::string_view fileName)
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로부터 흐른 tick

	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);

	// 현지 시간으로 변환
	auto It = localtime(&utc);	//c 함수

	// 한국형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	
	// 시간을 기록한다.
	out << '\n';
	out << "=========================================================" << '\n';
	out << "저장한 시간: " << std::put_time(It, " %x %A %X") << '\n';
	out << "=========================================================" << '\n';
	out << '\n';

	out.imbue(old); // 이용하고 돌려줘야함.

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}
=========================================================
STL.cpp 2024-03-07 목요일 오후 1:53:28
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 7일 목요일		(1주 2)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <algorithm>
#include <chrono>

void save(std::string_view);

//-------------
int main(void)
//-------------

{
	std::cout << "2024 STL" << '\n';
	save("STL.cpp");
}

//-----------------------------------
void save(std::string_view fileName)
//-----------------------------------
{
	// fileName을 읽기
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };
	
	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로부터 흐른 tick
	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);
	// 현지 시간으로 변환
	auto It = localtime(&utc);	//c 함수
	// 한국형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));
	
	// 시간을 기록한다.
	out << '\n';
	out << "=========================================================" << '\n';
	out << fileName << std::put_time(It, " %x %A %X") << '\n';
	out << "=========================================================" << '\n';
	out << '\n';

	out.imbue(old); // 이용하고 돌려줘야함.

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}

=========================================================
save.h:, 2024-03-07 목요일 오후 2:07:37
=========================================================

//-------------------------------------------------------------------
// save.h		한학기 강의를 저장한다.
// 
// 2024. 3. 7
//-------------------------------------------------------------------
#pragma once

void save(std::string_view);

=========================================================
save.cpp:, 2024-03-07 목요일 오후 2:07:37
=========================================================

//-------------------------------------------------------------------
// save.cpp		한학기 강의를 저장한다.
// 
// 2024. 3. 7
//-------------------------------------------------------------------
#include <string_view>
#include <fstream>
#include <iostream>
#include <chrono>
#include <vector>
#include <algorithm>
#include "save.h"

//-----------------------------------
void save(std::string_view fileName)
//-----------------------------------
{
	// fileName을 읽기용으로 연다.
	std::ifstream in{ fileName.data() };	//RAII
	if (not in) {
		std::cout << fileName << " 열기 실패" << '\n';
		exit(0);
	}

	// 저장할 파일을 덧붙여 쓰기모드로 연다.
	std::ofstream out{ "2024 1학기 STL 화56목56 강의저장.txt", std::ios::app };

	// 읽을 파일의 내용을 읽어 쓸 파일에 덧붙인다.
	// STL 자료구조와 알고리즘을 이용하여 기록한다. (좋은건 아니다)
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 현재 time_point를 얻는다.
	auto now = std::chrono::system_clock::now();	// epoch으로부터 흐른 tick
	// UTC 시간형식으로 변환
	auto utc = std::chrono::system_clock::to_time_t(now);
	// 현지 시간으로 변환
	auto It = localtime(&utc);	//c 함수

	// 한국형식으로 출력한다. (출력스트림의 지역을 변환)
	auto old = out.imbue(std::locale("ko_KR"));

	// 시간을 기록한다.
	out << '\n' << '\n';
	out << "=========================================================" << '\n';
	out << fileName << std::put_time(It, ":, %x %A %X") << '\n';
	out << "=========================================================" << '\n';
	out << '\n';

	out.imbue(old); // 이용하고 돌려줘야함.

	std::copy(v.begin(), v.end(), std::ostreambuf_iterator<char>{ out });
}

=========================================================
STL.cpp:, 2024-03-07 목요일 오후 2:07:37
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 7일 목요일		(1주 2)
// 
// VisualStudio 17.9 이상, Release/x64
// 프로젝트 설정 - 언어 /std:c++latest
//				 - C++언어 SDL 검사 - no
// 
// 한학기 강의를 저장할 save 함수 작성하고 파일 분리
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

//-------------
int main(void)
//-------------
{
	std::cout << "save 기능을 완성했다." << '\n';
	save("save.h");
	save("save.cpp");
	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-07 목요일 오후 2:28:18
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 7일 목요일		(1주 2)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라

void change(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}

//-------------
int main(void)
//-------------
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 2, 1

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-07 목요일 오후 2:28:50
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 7일 목요일		(1주 2)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의하라

template <typename T>
void change(T& a, T& b)
{
	T temp = a;
	a = b;
	b = temp;
}

//-------------
int main(void)
//-------------
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 2, 1

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-07 목요일 오후 3:00:41
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 7일 목요일		(1주 2)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] main()을 손대지 말고 의도대로 실행되도록 change()를 선언하고 정의

class Dog
{
private:
	int num;
public:
	Dog(int n) : num(n) {}
	friend std::ostream& operator<<(std::ostream& os, Dog n);
};

std::ostream& operator<<(std::ostream& os, Dog n)
{
	os << n.num;
	return os;
}

template <typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

//-------------
int main(void)
//-------------
{
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << '\n';	// 2, 1

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:03:12
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 99999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int i = 0; i < 100; ++i)
		a[i] = uid(dre);

	for (int i = 0; i < 100; ++i)
		std::cout << a[i] << '\n';
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:05:36
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int i = 0; i < 100; ++i)
		a[i] = uid(dre);

	for (int i = 0; i < 100; ++i)
		std::cout << std::format("{:8}", a[i]) << '\n';
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:05:58
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int i = 0; i < 100; ++i)
		a[i] = uid(dre);

	for (int i = 0; i < 100; ++i)
		std::cout << std::format("{:8}", a[i]);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:07:43
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int i = 0; i < 100; ++i)
		a[i] = uid(dre);

	for (int i = 0; i < 100; ++i)
		std::print(std::cout, "{:8}", a[i]);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:13:40
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[1000];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:13:54
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:16:05
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.
	int max = 0;

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	for (int& num : a)
		if (max < num)
			max = num;
	std::cout << "가장 큰 값: " << max << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:17:12
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.
	int max = 0;

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	for (int& num : a)
		if (max < num)
			max = num;

	std::cout << '\n' << "가장 큰 값: " << max << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:33:38
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.
	int max = 0;

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	std::max_element(std::begin(a), std::end(a));

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:35:35
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.
	int max = 0;

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	auto pos = std::max_element(std::begin(a), std::end(a));
	std::cout << "최대값: " << *pos << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:36:15
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.
	int max = 0;

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	std::cout << "최대값: " << *std::max_element(std::begin(a), std::end(a)) << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:36:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <format>		// c++ 20
#include <print>		// c++ 23
#include <algorithm>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	int a[100];			// 앞으로 T[N] 은 사용하지 않는다.

	for (int& num : a)
		num = uid(dre);

	for (int& num : a)
		std::print(std::cout, "{:8}", num);
	std::cout << '\n';

	// [문제] a의 값 중 가장 큰 값을 찾아 화면에 출력하라.

	std::cout << "최대값: " << *std::max_element(std::begin(a), std::end(a)) << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 2:57:26
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <random>
#include <array>
#include <fstream>
#include <print>
#include "save.h"

// [문제] int 100개를 저장할 공간을 만들어라.
// [0, 9'9999] 범위의 값을 갖는 int 100개에 할당하라.
// 화면에 값을 출력한다.

std::default_random_engine dre;
std::uniform_int_distribution uid(0, 9'9999);

//-------------
int main(void)
//-------------
{
	std::array<int, 100> a;			// T[N] 대신 array<T, N>을 사용.
	
	for (int& num : a)
		num = uid(dre);

	// [문제] 파일 "int값들.txt"에 a의 int값을 모두 저장하라.
	std::ofstream out{ "int값들.txt" };			// RAII
	for (int num : a)
		print(out, "{:8}", num);

	save("STL.cpp");
}

=========================================================
STL.cpp:, 2024-03-12 화요일 오후 3:09:02
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		3월 12일 화요일		(2주 1)
// 
// 많은 수의 데이터를 처리할 수 있어야...
//-------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <algorithm>
#include "save.h"

// [문제] "int값들.txt"에는 몇 개인지 모르는 int값이 있다.
// 제일 큰 값을 찾아 화면에 출력하라.

//-------------
int main(void)
//-------------
{
	std::ifstream in{ "int값들.txt" };
	if (not in) 
		exit(0);
	
	std::cout << "최대값: " << *std::max_element(std::istream_iterator<int>{in}, { }) << '\n';

	save("STL.cpp");
}