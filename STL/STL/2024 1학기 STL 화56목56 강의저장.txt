

=========================================================
STL.cpp: 2024-05-30 목요일 오후 1:59:24
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	std::vector<int> v{ 1, 3, 5, 7, 9 };

	// v에 홀수만 있나?
	bool b = std::all_of(v.begin(), v.end(), [](int n) {return n & 1; });

	if (b)
		std::cout << "모두 홀수" << '\n';
	else
		std::cout << "다 홀수인 것은 아니다" << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 1:59:32
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	std::vector<int> v{ 1, 3, 5, 7, 9, -2 };

	// v에 홀수만 있나?
	bool b = std::all_of(v.begin(), v.end(), [](int n) {return n & 1; });

	if (b)
		std::cout << "모두 홀수" << '\n';
	else
		std::cout << "다 홀수인 것은 아니다" << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:15:22
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <class 반복자, class 조건>
bool my_all_of(반복자 b, 반복자 e, 조건 lamda) {
	while (b != e)
		if (lamda(*b))
			b++;
		else
			return false;
	return true;
}

//-------------
int main(void)
//-------------
{
	std::vector<int> v{ 1, 3, 5, 7, 9, -2 };

	// v에 홀수만 있나?
	bool b = my_all_of(v.begin(), v.end(), [](int n) {return n & 1; });

	if (b)
		std::cout << "모두 홀수" << '\n';
	else
		std::cout << "다 홀수인 것은 아니다" << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:15:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

template <class 반복자, class 조건>
bool my_all_of(반복자 b, 반복자 e, 조건 lamda) {
	while (b != e)
		if (lamda(*b))
			b++;
		else
			return false;
	return true;
}

//-------------
int main(void)
//-------------
{
	std::vector<int> v{ 1, 3, 5, 7, 9 };

	// v에 홀수만 있나?
	bool b = my_all_of(v.begin(), v.end(), [](int n) {return n & 1; });

	if (b)
		std::cout << "모두 홀수" << '\n';
	else
		std::cout << "다 홀수인 것은 아니다" << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:28:06
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <numeric>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::default_random_engine dre{ std::random_device{}() };

//-------------
int main(void)
//-------------
{
	// 로또 번호 생성
	std::vector<int> v(45);
	std::iota(v.begin(), v.end(), 1);

	std::cout << "이번 주 번호 - ";
	std::sample(v.begin(), v.end(), std::ostream_iterator<int>{std::cout, " "}, 6, dre);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:32:05
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <print>
#include <string>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 글자가 흘러가는 전광판을 만들어 주세요.
	// "2024-5-30 STL algorithm 한글은 깨질 수 있다"
	std::string s{ "2024-5-30 STL algorithm 한글은 깨질 수 있다" };
	
	for (int i = 0; i < 10; i++)
		std::cout << '\n';

	std::print("{}", s);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:32:34
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// Unordered Associative Container - unordered_set / unordered_map
// - 순서가 없다
// - 메모리를 어떻게 사용하여 복잡도가 O(1)인가
// - 내가 만든 String을 저장하려면 어떻게
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <print>
#include <string>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 글자가 흘러가는 전광판을 만들어 주세요.
	// "2024-5-30 STL algorithm 한글은 깨질 수 있다"
	std::string s{ "2024-5-30 STL algorithm 한글은 깨질 수 있다" };
	
	for (int i = 0; i < 10; i++)
		std::cout << '\n';

	std::print("{:^80}", s);

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:44:39
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition
// nth_element
// partial_sort
// sort
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	for (int num : v)
		std::print("{:4}", num);
	std::cout << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:50:53
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition
// nth_element
// partial_sort
// sort
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	for (int num : v)
		std::print("{:4}", num);
	std::cout << '\n';

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:54:14
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:56:58
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// nth_element - 
		// n번째와 나머지로

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "nth_element 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::nth_element(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:57:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// nth_element - 
		// n번째와 나머지로.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "nth_element 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::nth_element(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 2:58:56
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// nth_element - 
		// n번째와 나머지로.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "nth_element 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::nth_element(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// partial_sort - 
		// n번째까지만 정렬.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partial_sort 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::partial_sort(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 3:01:08
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// nth_element - 
		// n번째와 나머지로.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "nth_element 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::nth_element(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// partial_sort - 
		// n번째까지만 정렬.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partial_sort 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::partial_sort(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// sort - 
		// 전체 정렬.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "sort 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		std::sort(v.begin(), v.end());
		for (auto i = v.begin(); i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 3:01:11
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>
#include <print>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };

//-------------
int main(void)
//-------------
{
	std::vector<int> v(100);
	for (int i = 0; i < v.size(); ++i)
		v[i] = i + 1;

	{
		// partition - 조건에 맞는 것과 아닌 것으로 분리
		// 홀짝으로 분리하고 각각 출력하라.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partition 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto p = std::partition(v.begin(), v.end(), [](int n) {return n & 1; });
		std::cout << "홀수" << '\n';
		for (auto i = v.begin(); i != p; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "짝수" << '\n';
		for (auto i = p; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// nth_element - 
		// n번째와 나머지로.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "nth_element 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::nth_element(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// partial_sort - 
		// n번째까지만 정렬.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "partial_sort 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		auto nth = v.begin() + 30;
		std::partial_sort(v.begin(), nth, v.end());
		std::cout << "30등까지" << '\n';
		for (auto i = v.begin(); i != nth; ++i)
			std::print("{:4}", *i);
		std::cout << '\n';
		std::cout << "나머지" << '\n';
		for (auto i = nth; i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	{
		// sort - 
		// 전체 정렬.

		std::shuffle(v.begin(), v.end(), dre);
		std::cout << "sort 하기 전" << '\n';
		for (int num : v)
			std::print("{:4}", num);
		std::cout << '\n' << '\n';

		std::sort(v.begin(), v.end());
		for (auto i = v.begin(); i != v.end(); ++i)
			std::print("{:4}", *i);
		std::cout << '\n' << '\n';
	}

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-30 목요일 오후 3:11:09
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };
std::uniform_int_distribution uid{ 1, 50 };
//std::uniform_int_distribution uidC{ 'A', 'Z' };

struct Dog {
	char c;
	int n;

	Dog() {
		//c = uidC(dre);
		n = uid(dre);
	}
};

//-------------
int main(void)
//-------------
{
	// stable_sort
	std::array<Dog, 100> dogs;

	sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.c < b.c;
		});

	for (auto [글자, 숫자] : dogs) 
		std::cout << 글자 << " - " << 숫자 << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-06-03 월요일 오전 2:49:15
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 28일 화요일		(13주 1)
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
// 
// 정렬관련 Algorithm - 복잡도 순으로
// partition		- 조건에 따라 분리
// nth_element		- n등까지와 나머지로 분리
// partial_sort		- n등까지는 정렬된 상태로 나머지는 무관
// sort				- 전체 정렬
// stable_sort
//-------------------------------------------------------------------
#include <iostream>
#include <array>
#include <random>
#include "save.h"
#include "String.h"

extern bool 관찰;

std::random_device rd;
std::default_random_engine dre{ rd() };
std::uniform_int_distribution uid{ 1, 50 };
std::uniform_int_distribution<int> uidC{ 'A', 'Z' };

struct Dog {
	char c;
	int n;

	Dog() {
		c = uidC(dre);
		n = uid(dre);
	}
};

//-------------
int main(void)
//-------------
{
	// stable_sort
	std::array<Dog, 100> dogs;

	sort(dogs.begin(), dogs.end(), [](const Dog& a, const Dog& b) {
		return a.c < b.c;
		});

	for (auto [글자, 숫자] : dogs) 
		std::cout << 글자 << " - " << 숫자 << '\n';

	save("STL.cpp");
}