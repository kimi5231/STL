

=========================================================
STL.cpp: 2024-05-21 화요일 오후 1:40:35
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어가 있나? 있다면 몇 개가 있나?

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		auto cnt = s.count(word);
		
		if (cnt)
			std::cout << word << "를 " << cnt << "번 사용했다." << '\n';
		else
			std::cout<< word <<"를 사용하지는 않았습니다."<<'\n';
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 1:53:29
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어가 있나? 있다면 몇 개가 있나?
	// 이 답은 항상 equal_range를 이용하자.

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		auto p = s.find(word);		// operator<. !(a<b) && 1(b<a)

		--p; --p;

		for (int i = 0; i < 400; ++i)
			std::cout << *p++ << ' ';
		std::cout << '\n';

		//auto cnt = s.count(word);		// operator==
		//
		//if (cnt)
		//	std::cout << word << "를 " << cnt << "번 사용했다." << '\n';
		//else
		//	std::cout<< word <<"를 사용하지는 않았습니다."<<'\n';
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:04:02
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어가 있나? 있다면 몇 개가 있나?
	// 이 답은 항상 equal_range를 이용하자.

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		auto [하한, 상한] = s.equal_range(word);		// structured-binding

		if (하한 == 상한) {
			std::cout << word << "는 앨리스에 없는 단어입니다." << '\n';
		}
		else {
			std::cout << word << "는 " << std::distance(하한, 상한) << "번 사용되었다" << '\n';
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:10:01
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	//정렬된 자료가 있을 때
	// 1. 이런 자료가 있나요? - contains, (binary_search)
	// 2. 이런 자료가 있으면 알려주세요. find, equal_range
	// 3. 이런 자료가 있나요? 있으면 몇 개나 있나요? equal_range

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		auto [하한, 상한] = s.equal_range(word);		// structured-binding

		if (하한 == 상한) {
			std::cout << word << "는 앨리스에 없는 단어입니다." << '\n';
		}
		else {
			std::cout << word << "는 " << std::distance(하한, 상한) << "번 사용되었다" << '\n';
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:21:51
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		for (const String& S : s) {
			// s안에 word가 있나?
			// 1번 String -> string으로 변환
			std::string str{ S.begin(), S.end() };
			std::string sword{ word.begin(), word.end() };
			if (str.contains(sword))
				std::cout << word << ' ';
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:22:18
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		for (const String& S : s) {
			// s안에 word가 있나?
			// 1번 String -> string으로 변환
			std::string str{ S.begin(), S.end() };
			std::string sword{ word.begin(), word.end() };
			if (str.contains(sword))
				std::cout << S << ' ';
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:28:53
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		for (const String& S : s) {
			// 전체 중에 일부분이 포함되어 있나 -> search
			auto p = std::search(S.begin(), S.end(), word.begin(), word.end());
			if (p != S.end())
				std::cout << S << " ";
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:32:32
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		for (const String& S : s) {
			// 전체 중에 일부분이 포함되어 있나 -> search
			auto p = std::search(S.begin(), S.end(), word.begin(), word.end());
			if (p != S.end())
				std::cout << S << " ";
		}
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:35:22
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		std::set<String> ans;
		for (const String& S : s) {
			// 전체 중에 일부분이 포함되어 있나 -> search
			auto p = std::search(S.begin(), S.end(), word.begin(), word.end());
			if (p != S.end())
				ans.insert(S);
		}

		for (const String& s : ans)
			std::cout << s << ' ';
		std::cout << '\n';
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:36:50
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// - equivalence(동등성, < ) / equality(상등성, == )
// 
// - less<Key>가 default 정렬기준 --> operator<
// - 함수객체
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include <algorithm>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	save("STL.cpp");

	std::ifstream in{ "이상한 나라의 앨리스.txt" };
	if (not in)
		return 0;

	std::multiset<String> s{ std::istream_iterator<String>{in}, {} };

	std::cout << "앨리스에서 사용한 단어 개수 - " << s.size() << '\n';

	// [문제] 찾는 단어를 포함한 모든 단어를 출력하라.
	// 예) 입력 - "ion" 출력 - sensation, imagination, nation

	while (true) {
		std::cout << "찾을 단어는? ";
		String word;
		std::cin >> word;

		std::set<String> ans;
		for (const String& S : s) {
			// 전체 중에 일부분이 포함되어 있나 -> search
			auto p = std::search(S.begin(), S.end(), word.begin(), word.end());
			if (p != S.end())
				ans.insert(S);
		}

		for (const String& s : ans)
			std::cout << s << ' ';
		std::cout << '\n' << '\n';
	}
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 2:56:30
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// map<Key, value> - dictionary
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <map>
#include <list>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// 게임회사 - 히트작을 map으로 관리
	std::map<String, std::list<String>> m{ {"펄어비스", {"검은 사막", "붉은 사막"}} };
	m.insert(std::pair<String, std::list<String>>{"넥슨", { "메이플", "바람의 나라", "던전앤파이터" }});
	m.insert(std::make_pair("엔씨소프트", std::list<String>{"리니지", "리니지M"}));
	// 맵은 연관배열로 사용할 수 있다.
	m["스마일게이트"] = {"로스트아크"};

	for (auto [회사, 게임들] : m) {
		std::cout << 회사 << " - ";
		for (const String& 게임 : 게임들)
			std::cout << 게임 << " ";
		std::cout << '\n';
	}
	std::cout << '\n';
	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-21 화요일 오후 3:03:56
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// map<Key, value> - dictionary
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <map>
#include <list>
#include <fstream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// [문제] 소설에 사용된 영문자와 그 사용횟수를 출력하라.
	// 대문자는 소문자로 변환한다.
	std::map<char, int> cim;

	std::ifstream in{ "이상한 나라의 앨리스.txt" };

	char c;
	while (in >> c) {
		if (isalpha(c))
			cim[tolower(c)]++;
	}

	for (auto [소문자, 횟수] : cim)
		std::cout << 소문자 << " - " << 횟수 << '\n';

	save("STL.cpp");
}

=========================================================
STL.cpp: 2024-05-22 수요일 오후 6:13:14
=========================================================

//-------------------------------------------------------------------
// 2024 1학기 STL 화56목56		5월 21일 화요일		(12주 1)
// 
// Associative Container - set / map
// 
// map<Key, value> - dictionary
// 
// 6월 6일 목요일 - 강의하겠습니다.
// 6월 13일 목요일 (15주 2일) - 기말시험
//-------------------------------------------------------------------
#include <iostream>
#include <map>
#include <set>
#include <list>
#include <fstream>
#include "save.h"
#include "String.h"

extern bool 관찰;

//-------------
int main(void)
//-------------
{
	// [문제] 소설에 사용된 영문자와 그 사용횟수를 횟수기준 내림차순으로 출력하라.
	// 대문자는 소문자로 변환한다.
	std::map<char, int> cim;

	std::ifstream in{ "이상한 나라의 앨리스.txt" };

	char c;
	while (in >> c) {
		if (isalpha(c))
			cim[tolower(c)]++;
	}

	for (auto [소문자, 횟수] : cim)
		std::cout << 소문자 << " - " << 횟수 << '\n';

	std::cout << cim.begin()->first;

	save("STL.cpp");
}